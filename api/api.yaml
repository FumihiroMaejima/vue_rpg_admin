swagger: "2.0"
# openapi: "3.0.0"
info:
  description: "Test 12345 You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "RPG-Admin Service"
  termsOfService: "https://github.com/user-name/repository-name"
  contact:
    email: "test@example.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3200"
basePath: "/api/v1"
tags:
- name: "members"
  description: "Administrators infomation"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "roles"
  description: "Roles infomation"
- name: "auth"
  description: "Operations about authentication"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /admin/members:
    get:
      tags:
      - "members"
      summary: "Find members"
      description: "Returns administrators data"
      # operationId: "getPetById"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Member"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Members not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - authenticaion_key: []
      - authority_key: []
  /admin/members/csv:
    get:
      tags:
      - "members"
      summary: "Find members as CSV data"
      description: "Returns administrators data by csv file"
      # operationId: "getPetById"
      produces:
      - "application/csv"
      # parameters: []
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileData"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Members not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - authenticaion_key: []
      - authority_key: []
  /admin/members/member:
    post:
      tags:
      - "members"
      summary: "Create Administrator"
      description: ""
      operationId: "createMemberWithForm"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "formData"
        description: "name of administrator"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email of administrator"
        required: true
        type: "string"
      - name: "roleId"
        in: "formData"
        description: "role of administrator"
        required: true
        type: "integer"
      - name: "password"
        in: "formData"
        description: "password of administrator"
        required: true
        type: "string"
      - name: "password_confirmation"
        in: "formData"
        description: "confirm password of administrator"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful Logout"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
  /admin/members/member/{id}:
    patch:
      tags:
      - "members"
      summary: "Updates member data with form data"
      description: ""
      operationId: "updateMemberWithForm"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "id"
        in: "path"
        description: "ID of member"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "name of administrator"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email of administrator"
        required: true
        type: "string"
      - name: "roleId"
        in: "formData"
        description: "role of administrator"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful Logout"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
    delete:
      tags:
      - "members"
      summary: "Deletes a member"
      description: ""
      operationId: "deleteMember"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "id"
        in: "path"
        description: "ID of member"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful Delete"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Membeer not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
  /admin/roles:
    get:
      tags:
      - "roles"
      summary: "Find roles"
      description: "Returns roles data"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Roles"
        "404":
          description: "Roles not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        default:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - authenticaion_key: []
      - authority_key: []
  /admin/roles/csv:
    get:
      tags:
      - "roles"
      summary: "Find roles CSV data"
      description: "Returns roles CSV data"
      produces:
      - "application/csv"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileData"
        "404":
          description: "Roles not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        default:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - authenticaion_key: []
      - authority_key: []
  /admin/roles/role:
    post:
      tags:
      - "roles"
      summary: "Create Role"
      description: ""
      operationId: "createRoleWithForm"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "formData"
        description: "name of Role"
        required: true
        type: "string"
      - name: "code"
        in: "formData"
        description: "code of Role"
        required: true
        type: "string"
      - name: "permissionId"
        in: "formData"
        description: "id of Permission"
        required: true
        type: "integer"
      - name: "detail"
        in: "formData"
        description: "detail of Role"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful Create"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
  /admin/roles/role/{id}:
    patch:
      tags:
      - "roles"
      summary: "Update Role"
      description: ""
      operationId: "UpdateRoleWithForm"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "id"
        in: "path"
        description: "ID of Role"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "name of Role"
        required: true
        type: "string"
      - name: "code"
        in: "formData"
        description: "code of Role"
        required: true
        type: "string"
      - name: "permissionId"
        in: "formData"
        description: "id of Permission"
        required: true
        type: "integer"
      - name: "detail"
        in: "formData"
        description: "detail of Role"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful UPdate"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "405":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
    delete:
      tags:
      - "roles"
      summary: "Deletes a role"
      description: ""
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      - name: "id"
        in: "path"
        description: "ID of role"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful Delete"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "400":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "404":
          description: "Membeer not found"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      security:
      - members_auth:
        - "write:members"
        - "read:members"
  /auth/admin/login:
    post:
      tags:
      - "auth"
      summary: "Logs user into the system"
      description: "Login Function"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "formData"
        description: "email of administrator"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password of administrator"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful Login"
          schema:
            $ref: "#/definitions/AuthRequestResponse"
          # headers:
          #  X-Rate-Limit:
          #    type: "integer"
          #    format: "int32"
          #    description: "calls per hour allowed by the user"
        "400":
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /auth/admin/logout:
    post:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: "Logout Function"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "successful Logout"
          schema:
            $ref: "#/definitions/ApiSuccessResponse"
        "401":
          description: "Unahthorithed"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        default:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /auth/admin/refresh:
    post:
      tags:
      - "auth"
      summary: "Refresh authenticated token"
      description: "Refresh Authenticated token Function"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "Authenticated"
          schema:
            $ref: "#/definitions/AuthRequestResponse"
        "401":
          description: "Unahthorithed"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        default:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /auth/admin/self:
    post:
      tags:
      - "auth"
      summary: "Check authenticated"
      description: "Check Authenticated Function"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "authenticaion_key"
        in: "header"
        description: "api key"
        required: true
        type: "string"
      - name: "authority_key"
        in: "header"
        description: "api key"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "Authenticated"
          schema:
            $ref: "#/definitions/AuthenticatedUser"
        "401":
          description: "Unahthorithed"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        default:
          description: "unsuccessful operation"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
securityDefinitions:
  members_auth:
    type: "oauth2"
    authorizationUrl: "http://example.com"
    flow: "implicit"
    scopes:
      write:members: "modify members in your account"
      read:members: "read your members"
  authenticaion_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
  authority_key:
    type: "apiKey"
    name: "X-Auth-Authority"
    in: "header"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  AuthRequestResponse:
    type: "object"
    properties:
      access_token:
        type: "string"
      token_type:
        type: "string"
      expires_in:
        type: "string"
      user:
        $ref: "#/definitions/AuthenticatedUser"
    xml:
      name: "AuthRequestResponse"
  AuthenticatedUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      authority:
        type: "integer"
        format: "int32"
        description: "User authority id"
    xml:
      name: "AuthenticatedUser"
  Member:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      roleId:
        type: "integer"
        format: "int64"
        description: "Admin`s role id"
    xml:
      name: "Member"
  Roles:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int64"
      text:
        type: "string"
    xml:
      name: "Member"
  FileData:
    description: "binary data"
    type: "object"
  ApiSuccessResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  ApiErrorResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      errors:
        type: "array"
        items:
          type: "string"
      message:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
